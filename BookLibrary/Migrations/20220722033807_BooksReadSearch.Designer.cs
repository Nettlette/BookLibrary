// <auto-generated />
using System;
using BookLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookLibrary.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220722033807_BooksReadSearch")]
    partial class BooksReadSearch
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookLibrary.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<DateTime?>("DateBorn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDied")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookLibrary.Models.AuthorLocation", b =>
                {
                    b.Property<int>("AuthorLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorLocationId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("AuthorLocationId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LocationId");

                    b.ToTable("AuthorLocations");
                });

            modelBuilder.Entity("BookLibrary.Models.AuthorLocationsView", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("AuthorLocationsView");
                });

            modelBuilder.Entity("BookLibrary.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("ASIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookLibrary.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookAuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAuthorID"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BookAuthorID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookLibrary.Models.BookDetailsByAuthorView", b =>
                {
                    b.Property<string>("ASIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Subcategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("BookDetailsByAuthorView");
                });

            modelBuilder.Entity("BookLibrary.Models.BookIndex", b =>
                {
                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BooksReadId")
                        .HasColumnType("int");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Locations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reader")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subcategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("BookIndex");
                });

            modelBuilder.Entity("BookLibrary.Models.BookLocation", b =>
                {
                    b.Property<int>("BookLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookLocationID"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("BookLocationID");

                    b.HasIndex("BookId");

                    b.HasIndex("LocationId");

                    b.ToTable("BookLocations");
                });

            modelBuilder.Entity("BookLibrary.Models.BookLocationsByAuthorView", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("BookLocationsByAuthorView");
                });

            modelBuilder.Entity("BookLibrary.Models.BooksRead", b =>
                {
                    b.Property<int>("BooksReadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BooksReadId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BooksReadId");

                    b.HasIndex("BookId");

                    b.HasIndex("ReaderId");

                    b.ToTable("BooksRead");
                });

            modelBuilder.Entity("BookLibrary.Models.BooksReadIndex", b =>
                {
                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<decimal?>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Locations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Subcategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("BooksReadIndex");
                });

            modelBuilder.Entity("BookLibrary.Models.BookSubcategoriesByAuthorView", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("BookSubcategoriesByAuthorView");
                });

            modelBuilder.Entity("BookLibrary.Models.BookSubcategory", b =>
                {
                    b.Property<int>("BookSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookSubcategoryId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookSubcategoryId");

                    b.HasIndex("BookId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("BookSubcategories");
                });

            modelBuilder.Entity("BookLibrary.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"), 1L, 1);

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BookLibrary.Models.LocationAuthorDetailView", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("LocationAuthorDetailView");
                });

            modelBuilder.Entity("BookLibrary.Models.LocationBookDetailView", b =>
                {
                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("LocationBookDetailView");
                });

            modelBuilder.Entity("BookLibrary.Models.Reader", b =>
                {
                    b.Property<int>("ReaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReaderID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReaderID");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("BookLibrary.Models.ReaderAuthorView", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.ToView("ReaderAuthorView");
                });

            modelBuilder.Entity("BookLibrary.Models.ReaderBooksView", b =>
                {
                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("ReaderBooksView");
                });

            modelBuilder.Entity("BookLibrary.Models.ReaderLocationsView", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.ToView("ReaderLocationsView");
                });

            modelBuilder.Entity("BookLibrary.Models.ReaderStats", b =>
                {
                    b.Property<int>("FastHrBookId")
                        .HasColumnType("int");

                    b.Property<decimal>("FastHrSpeedHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FastHrSpeedPg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FastHrTimeToFinish")
                        .HasColumnType("int");

                    b.Property<int>("FastPgBookId")
                        .HasColumnType("int");

                    b.Property<decimal>("FastPgSpeedHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FastPgSpeedPg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FastPgTimeToFinish")
                        .HasColumnType("int");

                    b.Property<decimal>("FictionAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FictionCount")
                        .HasColumnType("int");

                    b.Property<decimal>("FictionHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FictionPg")
                        .HasColumnType("int");

                    b.Property<int>("LongBookId")
                        .HasColumnType("int");

                    b.Property<int>("NewBookId")
                        .HasColumnType("int");

                    b.Property<decimal>("NonFictionAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NonfictionCount")
                        .HasColumnType("int");

                    b.Property<decimal>("NonfictionHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NonfictionPg")
                        .HasColumnType("int");

                    b.Property<int>("OldBookId")
                        .HasColumnType("int");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<int>("ShortBookId")
                        .HasColumnType("int");

                    b.Property<int>("SlowHrBookId")
                        .HasColumnType("int");

                    b.Property<decimal>("SlowHrSpeedHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SlowHrSpeedPg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SlowHrTimeToFinish")
                        .HasColumnType("int");

                    b.Property<int>("SlowPgBookId")
                        .HasColumnType("int");

                    b.Property<decimal>("SlowPgSpeedHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SlowPgSpeedPg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SlowPgTimeToFinish")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalHr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalPg")
                        .HasColumnType("int");

                    b.HasIndex("FastHrBookId");

                    b.HasIndex("FastPgBookId");

                    b.HasIndex("LongBookId");

                    b.HasIndex("NewBookId");

                    b.HasIndex("OldBookId");

                    b.HasIndex("ShortBookId");

                    b.HasIndex("SlowHrBookId");

                    b.HasIndex("SlowPgBookId");

                    b.ToView("ReaderStats");
                });

            modelBuilder.Entity("BookLibrary.Models.ReaderSubcategoryView", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.ToView("ReaderSubcategoryView");
                });

            modelBuilder.Entity("BookLibrary.Models.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeriesId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("BookLibrary.Models.SeriesAuthorView", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.ToView("SeriesAuthorView");
                });

            modelBuilder.Entity("BookLibrary.Models.SeriesBookView", b =>
                {
                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("SeriesBookView");
                });

            modelBuilder.Entity("BookLibrary.Models.SeriesSubcategoryView", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.ToView("SeriesSubcategoryView");
                });

            modelBuilder.Entity("BookLibrary.Models.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubcategoryId");

                    b.ToTable("Subcategory");
                });

            modelBuilder.Entity("BookLibrary.Models.SubcategoryAuthorDetailView", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.ToView("SubcategoryAuthorDetailView");
                });

            modelBuilder.Entity("BookLibrary.Models.SubcategoryBookDetailView", b =>
                {
                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SeriesOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("SubcategoryBookDetailView");
                });

            modelBuilder.Entity("BookLibrary.Models.AuthorLocation", b =>
                {
                    b.HasOne("BookLibrary.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookLibrary.Models.Book", b =>
                {
                    b.HasOne("BookLibrary.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("BookLibrary.Models.BookAuthor", b =>
                {
                    b.HasOne("BookLibrary.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookLibrary.Models.BookLocation", b =>
                {
                    b.HasOne("BookLibrary.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookLibrary.Models.BooksRead", b =>
                {
                    b.HasOne("BookLibrary.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Reader", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("BookLibrary.Models.BookSubcategory", b =>
                {
                    b.HasOne("BookLibrary.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("BookLibrary.Models.ReaderStats", b =>
                {
                    b.HasOne("BookLibrary.Models.Book", "FastHrBook")
                        .WithMany()
                        .HasForeignKey("FastHrBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "FastPgBook")
                        .WithMany()
                        .HasForeignKey("FastPgBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "LongBook")
                        .WithMany()
                        .HasForeignKey("LongBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "NewBook")
                        .WithMany()
                        .HasForeignKey("NewBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "OldBook")
                        .WithMany()
                        .HasForeignKey("OldBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "ShortBook")
                        .WithMany()
                        .HasForeignKey("ShortBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "SlowHrBook")
                        .WithMany()
                        .HasForeignKey("SlowHrBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Models.Book", "SlowPgBook")
                        .WithMany()
                        .HasForeignKey("SlowPgBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FastHrBook");

                    b.Navigation("FastPgBook");

                    b.Navigation("LongBook");

                    b.Navigation("NewBook");

                    b.Navigation("OldBook");

                    b.Navigation("ShortBook");

                    b.Navigation("SlowHrBook");

                    b.Navigation("SlowPgBook");
                });
#pragma warning restore 612, 618
        }
    }
}
